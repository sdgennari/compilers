         9922265 function calls (9919862 primitive calls) in 11.935 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        8    9.434    1.179    9.799    1.225 allocate_registers.py:181(build_register_graph)
  2828654    0.468    0.000    0.468    0.000 {hasattr}
      390    0.423    0.001    1.437    0.004 allocate_registers.py:123(spill_register)
   933660    0.304    0.000    0.687    0.000 allocate_registers.py:166(is_operand)
   410875    0.246    0.000    0.246    0.000 {range}
        8    0.241    0.030    1.786    0.223 allocate_registers.py:15(allocate_registers)
   933660    0.201    0.000    0.278    0.000 allocate_registers.py:175(is_assignee)
       15    0.200    0.013    0.253    0.017 basic_blocks.py:186(computeLiveSets)
   817652    0.094    0.000    0.094    0.000 {method 'add' of 'set' objects}
  1591638    0.068    0.000    0.068    0.000 {len}
   974849    0.051    0.000    0.051    0.000 {method 'append' of 'list' objects}
   412027    0.046    0.000    0.046    0.000 {method 'discard' of 'set' objects}
   808227    0.032    0.000    0.032    0.000 {method 'has_key' of 'dict' objects}
     4011    0.017    0.000    0.017    0.000 {method 'keys' of 'dict' objects}
        1    0.015    0.015   11.916   11.916 main.py:412(get_methods_string)
      807    0.009    0.000    0.015    0.000 tac_to_asm.py:524(gen_asm_for_new_boxed_type)
     2797    0.008    0.000    0.038    0.000 tac_to_asm.py:847(gen_asm_for_tac_instr)
    77490    0.007    0.000    0.007    0.000 {isinstance}
        1    0.006    0.006   11.892   11.892 main.py:454(ast_method_to_asm)
     7892    0.005    0.000    0.005    0.000 {method 'pop' of 'list' objects}
     6850    0.005    0.000    0.005    0.000 copy.py:113(_copy_with_constructor)
     6819    0.004    0.000    0.004    0.000 {method 'insert' of 'list' objects}
     6850    0.004    0.000    0.009    0.000 copy.py:66(copy)
    802/1    0.003    0.000    0.006    0.006 ast_to_tac.py:74(gen_tac_for_exp)
  1633/31    0.003    0.000    0.011    0.000 deserialize_ast.py:40(exp_from_input)
     7379    0.003    0.000    0.003    0.000 asm_objects.py:119(__init__)
     7379    0.002    0.000    0.002    0.000 asm_objects.py:122(__str__)
     7358    0.002    0.000    0.002    0.000 asm_objects.py:130(__str__)
      800    0.002    0.000    0.003    0.000 tac_to_asm.py:544(gen_asm_for_tac_unbox)
     7358    0.002    0.000    0.002    0.000 asm_objects.py:127(__init__)
     6154    0.002    0.000    0.002    0.000 asm_objects.py:213(__str__)
        1    0.002    0.002   11.935   11.935 main.py:2(<module>)
        1    0.002    0.002    0.014    0.014 deserialize_ast.py:445(get_input_list_from_annotated_ast)
     2491    0.002    0.000    0.004    0.000 deserialize_ast.py:8(next_int)
     2946    0.001    0.000    0.001    0.000 asm_objects.py:43(__str__)
      400    0.001    0.000    0.009    0.000 tac_to_asm.py:512(gen_asm_for_tac_box)
        8    0.001    0.000    0.001    0.000 {zip}
     3395    0.001    0.000    0.004    0.000 deserialize_ast.py:12(next_string)
     4200    0.001    0.000    0.001    0.000 asm_objects.py:30(__init__)
      401    0.001    0.000    0.009    0.000 tac_to_asm.py:59(gen_asm_for_tac_const_int)
     4790    0.001    0.000    0.001    0.000 tac_to_asm.py:45(get_asm_register)
     6154    0.001    0.000    0.001    0.000 asm_objects.py:210(__init__)
        7    0.001    0.000    0.039    0.006 tac_to_asm.py:988(gen_asm_for_block_list)
      400    0.001    0.000    0.001    0.000 tac_to_asm.py:307(gen_asm_for_tac_plus)
        8    0.001    0.000    0.001    0.000 allocate_registers.py:149(combine_block_live_ranges)
     2405    0.001    0.000    0.001    0.000 ast_to_tac.py:18(new_symbol)
        7    0.001    0.000    0.001    0.000 basic_blocks.py:7(__init__)
      390    0.001    0.000    0.001    0.000 tac_to_asm.py:226(gen_asm_for_tac_load)
        7    0.001    0.000    0.002    0.000 basic_blocks.py:158(buildBasicBlocks)
     8014    0.001    0.000    0.001    0.000 {method 'pop' of 'dict' objects}
      390    0.001    0.000    0.001    0.000 tac_to_asm.py:215(gen_asm_for_tac_store)
     6850    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}
      800    0.001    0.000    0.001    0.000 ast_to_tac.py:69(gen_tac_for_unbox)
     5886    0.001    0.000    0.001    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 asm_objects.py:29(<module>)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:1(<module>)
      809    0.000    0.000    0.000    0.000 asm_objects.py:39(__str__)
      802    0.000    0.000    0.000    0.000 ast_nodes.py:390(__init__)
      400    0.000    0.000    0.001    0.000 ast_to_tac.py:64(gen_tac_for_box)
      834    0.000    0.000    0.000    0.000 asm_objects.py:195(__str__)
        1    0.000    0.000    0.000    0.000 {method 'write' of 'file' objects}
      800    0.000    0.000    0.000    0.000 ast_nodes.py:201(__init__)
      400    0.000    0.000    0.000    0.000 asm_objects.py:51(__str__)
      390    0.000    0.000    0.000    0.000 tac_objects.py:293(__init__)
      800    0.000    0.000    0.000    0.000 tac_objects.py:310(__init__)
        1    0.000    0.000    0.001    0.001 tac_to_asm.py:1(<module>)
      390    0.000    0.000    0.000    0.000 tac_objects.py:287(__init__)
        1    0.000    0.000    0.008    0.008 deserialize_ast.py:358(make_global_implementation_map)
        2    0.000    0.000    0.000    0.000 {open}
        1    0.000    0.000    0.001    0.001 main.py:146(get_constructor_string)
      834    0.000    0.000    0.000    0.000 asm_objects.py:192(__init__)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1507(get_cmp_lt_helper_string)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1817(get_cmp_eq_helper_string)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1661(get_cmp_le_helper_string)
      401    0.000    0.000    0.000    0.000 tac_objects.py:102(__init__)
        1    0.000    0.000    0.000    0.000 ast_to_tac.py:7(<module>)
       29    0.000    0.000    0.000    0.000 ast_nodes.py:450(__init__)
      400    0.000    0.000    0.000    0.000 tac_objects.py:301(__init__)
      400    0.000    0.000    0.000    0.000 tac_objects.py:22(__init__)
        1    0.000    0.000    0.000    0.000 allocate_registers.py:2(<module>)
        6    0.000    0.000    0.001    0.000 main.py:165(gen_asm_for_constructor)
        1    0.000    0.000    0.000    0.000 main.py:27(get_vtables_string)
        1    0.000    0.000    0.000    0.000 tac_objects.py:8(<module>)
        1    0.000    0.000    0.000    0.000 tac_objects.py:403(TACCaseCmpTypesAndJe)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:617(gen_asm_for_tac_call)
        6    0.000    0.000    0.000    0.000 tac_to_asm.py:591(gen_asm_for_tac_alloc_type)
       31    0.000    0.000    0.000    0.000 ast_nodes.py:67(__init__)
       17    0.000    0.000    0.000    0.000 main.py:354(gen_asm_for_method_start)
        1    0.000    0.000    0.004    0.004 deserialize_ast.py:281(class_from_input)
        1    0.000    0.000    0.000    0.000 deserialize_ast.py:1(<module>)
        1    0.000    0.000    0.000    0.000 main.py:515(get_helper_strings)
        1    0.000    0.000    0.000    0.000 deserialize_ast.py:322(make_global_class_map)
       17    0.000    0.000    0.000    0.000 main.py:361(gen_asm_for_method_end)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1386(gen_asm_for_internal_in_int)
        1    0.000    0.000    0.000    0.000 main.py:58(get_constants_string)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1185(gen_asm_for_internal_type_name)
        1    0.000    0.000    0.004    0.004 deserialize_ast.py:246(feature_from_input)
        1    0.000    0.000    0.000    0.000 basic_blocks.py:1(<module>)
       10    0.000    0.000    0.000    0.000 tac_to_asm.py:1034(gen_asm_for_internal_method)
        5    0.000    0.000    0.000    0.000 {sorted}
        3    0.000    0.000    0.000    0.000 tac_to_asm.py:576(gen_asm_for_tac_store_attr)
        1    0.000    0.000    0.000    0.000 asm_objects.py:158(ASMTestL)
        1    0.000    0.000    0.006    0.006 ast_to_tac.py:626(gen_tac_for_feature)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1474(gen_asm_for_internal_length)
        1    0.000    0.000    0.000    0.000 main.py:389(get_program_start_string)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1124(gen_asm_for_internal_str_substr)
       20    0.000    0.000    0.000    0.000 asm_objects.py:151(__str__)
        1    0.000    0.000    0.000    0.000 main.py:74(get_type_name_strings)
        1    0.000    0.000    0.000    0.000 deserialize_ast.py:401(update_global_implementation_map)
       19    0.000    0.000    0.000    0.000 asm_objects.py:106(__str__)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1315(get_raw_out_string_helper)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1236(get_raw_in_string_helper)
        1    0.000    0.000    0.000    0.000 main.py:365(make_global_type_tag_map)
        3    0.000    0.000    0.000    0.000 tac_to_asm.py:96(gen_asm_for_tac_default)
       41    0.000    0.000    0.000    0.000 asm_objects.py:91(__init__)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1069(gen_asm_for_internal_str_concat)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1205(gen_asm_for_internal_copy)
        6    0.000    0.000    0.000    0.000 main.py:19(get_header_comment_string)
        9    0.000    0.000    0.000    0.000 asm_objects.py:55(__str__)
        8    0.000    0.000    0.000    0.000 asm_objects.py:67(__str__)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1370(gen_asm_for_internal_out_int)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:777(gen_asm_for_tac_store_param)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1196(gen_asm_for_internal_abort)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1086(get_string_concat_helper)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:127(gen_asm_for_tac_label)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1225(gen_asm_for_internal_in_string)
        6    0.000    0.000    0.000    0.000 asm_objects.py:146(__str__)
        1    0.000    0.000    0.000    0.000 main.py:379(make_global_attr_offset_map)
       42    0.000    0.000    0.000    0.000 main.py:16(format_quad_line)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1144(get_string_substr_helper)
        6    0.000    0.000    0.000    0.000 tac_objects.py:430(__init__)
       22    0.000    0.000    0.000    0.000 asm_objects.py:135(__init__)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:1302(gen_asm_for_internal_out_string)
       22    0.000    0.000    0.000    0.000 asm_objects.py:138(__str__)
       12    0.000    0.000    0.000    0.000 main.py:139(get_vtable_str)
        6    0.000    0.000    0.000    0.000 main.py:143(calculate_type_size)
       15    0.000    0.000    0.000    0.000 asm_objects.py:94(__str__)
        1    0.000    0.000    0.004    0.004 deserialize_ast.py:303(ast_from_input)
        1    0.000    0.000    0.000    0.000 tac_to_asm.py:184(gen_asm_for_tac_return)
        2    0.000    0.000    0.000    0.000 ast_nodes.py:346(__init__)
        2    0.000    0.000    0.000    0.000 asm_objects.py:102(__str__)
        2    0.000    0.000    0.000    0.000 asm_objects.py:222(__str__)
        3    0.000    0.000    0.000    0.000 ast_nodes.py:39(__init__)
        1    0.000    0.000    0.000    0.000 asm_objects.py:74(ASMImulL)
        1    0.000    0.000    0.000    0.000 deserialize_ast.py:436(make_global_parent_map)
       20    0.000    0.000    0.000    0.000 asm_objects.py:200(__str__)
        1    0.000    0.000    0.000    0.000 tac_objects.py:186(TACIsVoid)
        1    0.000    0.000    0.000    0.000 tac_objects.py:10(TACAssign)
        1    0.000    0.000    0.000    0.000 ast_to_tac.py:23(new_label_num)
        1    0.000    0.000    0.000    0.000 main.py:93(get_abort_string)
        1    0.000    0.000    0.000    0.000 shared_vars.py:4(<module>)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:5(__init__)
        1    0.000    0.000    0.000    0.000 asm_objects.py:101(ASMJmpLe)
        1    0.000    0.000    0.000    0.000 asm_objects.py:113(ASMJmpNe)
        1    0.000    0.000    0.000    0.000 tac_objects.py:101(TACConstInt)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:185(ASTExpNew)
        1    0.000    0.000    0.000    0.000 tac_objects.py:165(TACNewSelfType)
        1    0.000    0.000    0.000    0.000 tac_objects.py:21(TACPlus)
        2    0.000    0.000    0.000    0.000 asm_objects.py:187(__str__)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:299(ASTExpDynamicDispatch)
        1    0.000    0.000    0.000    0.000 tac_objects.py:283(TACCustom)
        1    0.000    0.000    0.000    0.000 tac_objects.py:318(TACLoadAttr)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:136(ASTExpLetBinding)
        1    0.000    0.000    0.000    0.000 asm_objects.py:97(ASMJmpL)
       20    0.000    0.000    0.000    0.000 asm_objects.py:205(__str__)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:257(ASTExpUnary)
        1    0.000    0.000    0.000    0.000 asm_objects.py:126(ASMPopQ)
        1    0.000    0.000    0.000    0.000 tac_objects.py:251(__init__)
        1    0.000    0.000    0.000    0.000 asm_objects.py:141(ASMCmpBase)
        1    0.000    0.000    0.000    0.000 asm_objects.py:181(ASMCltd)
        1    0.000    0.000    0.000    0.000 main.py:101(get_substr_error_string)
        1    0.000    0.000    0.000    0.000 tac_objects.py:175(TACDefault)
        1    0.000    0.000    0.000    0.000 main.py:122(get_io_format_strings)
        2    0.000    0.000    0.000    0.000 asm_objects.py:98(__str__)
        1    0.000    0.000    0.000    0.000 asm_objects.py:171(ASMXorL)
        1    0.000    0.000    0.000    0.000 tac_objects.py:300(TACBox)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:119(ASTExpLet)
        1    0.000    0.000    0.000    0.000 main.py:108(gen_const_strings)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:157(ASTExpIfThenElse)
        1    0.000    0.000    0.000    0.000 main.py:85(get_empty_string)
        3    0.000    0.000    0.000    0.000 asm_objects.py:114(__str__)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:4(ASTProgram)
        3    0.000    0.000    0.000    0.000 tac_objects.py:176(__init__)
        1    0.000    0.000    0.000    0.000 tac_objects.py:373(TACDynamicCall)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:389(ASTExpInteger)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:15(__init__)
        1    0.000    0.000    0.000    0.000 tac_objects.py:429(TACAllocType)
        1    0.000    0.000    0.000    0.000 tac_objects.py:250(TACLabel)
        1    0.000    0.000    0.000    0.000 asm_objects.py:71(ASMImul)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:282(ASTExpBlock)
        1    0.000    0.000    0.000    0.000 tac_objects.py:112(TACConstBool)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:378(ASTExpString)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:270(ASTExpTilde)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:320(ASTExpStaticDispatch)
        1    0.000    0.000    0.000    0.000 tac_objects.py:200(TACOutInt)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:66(ASTMethod)
        1    0.000    0.000    0.000    0.000 asm_objects.py:155(ASMTest)
        1    0.000    0.000    0.000    0.000 asm_objects.py:59(ASMSub)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:249(ASTExpEq)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:221(ASTExpTimes)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:199(ASTExpBinaryArith)
        1    0.000    0.000    0.000    0.000 tac_objects.py:346(__init__)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:409(ASTExpFalse)
        1    0.000    0.000    0.000    0.000 tac_objects.py:242(TACJmp)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:51(ASTAttrInit)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:242(ASTExpLe)
        1    0.000    0.000    0.000    0.000 tac_objects.py:292(TACLoad)
        1    0.000    0.000    0.000    0.000 tac_objects.py:354(TACCall)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:98(ASTExp)
        2    0.000    0.000    0.000    0.000 asm_objects.py:219(__init__)
        1    0.000    0.000    0.000    0.000 tac_objects.py:78(TACCompLE)
        1    0.000    0.000    0.000    0.000 tac_objects.py:123(TACConstString)
        1    0.000    0.000    0.000    0.000 tac_objects.py:274(TACBt)
        1    0.000    0.000    0.000    0.000 asm_objects.py:29(ASMSrcDestBase)
        1    0.000    0.000    0.000    0.000 asm_objects.py:105(ASMJmpEq)
        1    0.000    0.000    0.000    0.000 tac_objects.py:345(TACStoreParam)
        1    0.000    0.000    0.000    0.000 asm_objects.py:163(ASMNegL)
        1    0.000    0.000    0.000    0.000 asm_objects.py:118(ASMPushQ)
        1    0.000    0.000    0.000    0.000 tac_objects.py:210(TACOutString)
        1    0.000    0.000    0.000    0.000 tac_objects.py:89(TACCompE)
        1    0.000    0.000    0.000    0.000 tac_objects.py:145(TACNegArith)
        1    0.000    0.000    0.000    0.000 tac_objects.py:421(TACError)
        1    0.000    0.000    0.000    0.000 asm_objects.py:90(ASMJmp)
        1    0.000    0.000    0.000    0.000 asm_objects.py:186(ASMLeaQ)
        1    0.000    0.000    0.000    0.000 basic_blocks.py:6(TACBasicBlock)
        1    0.000    0.000    0.000    0.000 asm_objects.py:204(ASMLeave)
        1    0.000    0.000    0.000    0.000 asm_objects.py:145(ASMCmpL)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:14(ASTClass)
        3    0.000    0.000    0.000    0.000 tac_objects.py:328(__init__)
        1    0.000    0.000    0.000    0.000 tac_objects.py:266(TACComment)
        1    0.000    0.000    0.000    0.000 asm_objects.py:38(ASMMovL)
        1    0.000    0.000    0.000    0.000 asm_objects.py:66(ASMSubQ)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:214(ASTExpMinus)
        1    0.000    0.000    0.000    0.000 asm_objects.py:47(ASMAdd)
        1    0.000    0.000    0.000    0.000 asm_objects.py:218(ASMCustomString)
        1    0.000    0.000    0.000    0.000 asm_objects.py:42(ASMMovQ)
        1    0.000    0.000    0.000    0.000 tac_objects.py:309(TACUnbox)
        1    0.000    0.000    0.000    0.000 asm_objects.py:109(ASMJmpNz)
        1    0.000    0.000    0.000    0.000 tac_objects.py:196(TACIOCall)
        1    0.000    0.000    0.000    0.000 tac_objects.py:357(TACStaticCall)
        1    0.000    0.000    0.000    0.000 tac_objects.py:54(TACDiv)
        1    0.000    0.000    0.000    0.000 tac_objects.py:327(TACStoreAttr)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:345(ASTExpSelfDispatch)
        1    0.000    0.000    0.000    0.000 tac_objects.py:43(TACMult)
        1    0.000    0.000    0.000    0.000 tac_objects.py:259(__init__)
        1    0.000    0.000    0.000    0.000 tac_objects.py:258(TACReturn)
        1    0.000    0.000    0.000    0.000 asm_objects.py:79(ASMIdiv)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:104(ASTExpAssign)
        1    0.000    0.000    0.000    0.000 asm_objects.py:209(ASMComment)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:418(ASTExpCase)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:449(ASTExpInternal)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:207(ASTExpPlus)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:434(ASTExpCaseElem)
        1    0.000    0.000    0.000    0.000 tac_objects.py:220(TACInInt)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:276(ASTExpNot)
        1    0.000    0.000    0.000    0.000 tac_objects.py:286(TACStore)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:400(ASTExpTrue)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:297(ASTExpDispatch)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:34(ASTFeature)
        1    0.000    0.000    0.000    0.000 asm_objects.py:62(ASMSubL)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:38(ASTAttrNoInit)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:86(ASTFormal)
        1    0.000    0.000    0.000    0.000 asm_objects.py:35(ASMMov)
        1    0.000    0.000    0.000    0.000 asm_objects.py:176(ASMXchgL)
        1    0.000    0.000    0.000    0.000 tac_objects.py:67(TACCompL)
        1    0.000    0.000    0.000    0.000 tac_objects.py:156(TACNew)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:264(ASTExpIsVoid)
        1    0.000    0.000    0.000    0.000 tac_objects.py:229(TACInString)
        1    0.000    0.000    0.000    0.000 tac_objects.py:32(TACMinus)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:172(ASTExpWhileLoopPool)
        1    0.000    0.000    0.000    0.000 asm_objects.py:134(ASMLabel)
        1    0.000    0.000    0.000    0.000 tac_objects.py:390(__init__)
        1    0.000    0.000    0.000    0.000 asm_objects.py:191(ASMCall)
        1    0.000    0.000    0.000    0.000 tac_objects.py:135(TACNegBool)
        1    0.000    0.000    0.000    0.000 asm_objects.py:54(ASMAddQ)
        1    0.000    0.000    0.000    0.000 tac_objects.py:413(TACGetTypeTag)
        1    0.000    0.000    0.000    0.000 tac_objects.py:336(TACLoadParam)
        1    0.000    0.000    0.000    0.000 asm_objects.py:199(ASMRet)
        1    0.000    0.000    0.000    0.000 asm_objects.py:150(ASMCmpQ)
        1    0.000    0.000    0.000    0.000 asm_objects.py:50(ASMAddL)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:365(ASTExpIdentifier)
        1    0.000    0.000    0.000    0.000 tac_objects.py:238(TACControlFlow)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:235(ASTExpLt)
        1    0.000    0.000    0.000    0.000 ast_nodes.py:228(ASTExpDivide)
        1    0.000    0.000    0.000    0.000 tac_objects.py:389(TACSelfCall)
        1    0.000    0.000    0.000    0.000 asm_objects.py:82(ASMIdivL)


